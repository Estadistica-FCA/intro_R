---
title: "Comenzando con R"
---

```{r, echo = F, include = F}
library(knitr)
```

En esta sección vamos a ver que es cómo instalar y cómo empezar a usar R y RStudio creando nuestro nuestro proyecto de análisis reproducible de datos.

## ¿Qué es **R** y **RStudio**?

**R** es un lenguaje y entorno para el procesamiento, visualización y análisis estadístico de datos. Fue creado en 1993 por R. Gentleman y R. Ihaka, ambos científicos del Departamento de Estadística de la Universidad de Auckland (Nueva Zelanda). Actualmente su desarrollo y mantenimiento está a cargo del @Rcore. El sitio oficial del proyecto es [www.r-project.org](www.r-project.org).

```{r, echo = F, fig.cap = 'Página oficial de R Project', out.width = '75%' , out.extra=''} 
# webshot::webshot('http://www.r-project.org', file = "./assets/rproject.png")
include_graphics('assets/rproject.png', auto_pdf = T)
```

Hoy en día, **R** es la _lingua franca_ del procesamiento y análisis de datos, tanto en el ámbito académico como comercial dado que es gratiuto, multiplataforma, de código abierto (_open source_, liberado con licencia GNU/GPL). Esto y el ecosistema de paquetes contribuidos por la comunidad de usuarios lo convierte en un software muy potente ya que expresa el estado del arte de los métodos estadísticos. 

La flexibilidad y potencia de **R** se basa en su interfaz de comandos (CLI, del inglés _command line interface_ ) que permite la ejecución de comandos de manera interactiva (en consola) o estructurada mediante scripts. 

```{r, echo = F, fig.cap = 'Ejemplo de consola o terminal de Linux y Windows corriendo la última versión estable de **R**', out.width = '75%', out.extra=''} 
include_graphics('assets/consola_linux.png', auto_pdf = T)
```

Existen algunos desarrollos de interfases gráficas (GUIs, del inglés _graphical user interface_), e.g. RCommander, Deducer, etc., que ofrecen la posibilidad de, mediante menúes y botones dedicados, ejecutar algunos análisis relativamente simples minimizando la necesidad de escribir código.

```{r, echo = F, fig.cap = 'Interfase de **R** Commander', out.width = '75%', out.extra=''} 
include_graphics('assets/RcmdrBASE.png', auto_pdf = T)
```

Los entornos de desarrollo integrados (IDE por sus siglas en inglés _integrated development environments_) ofrecen un enfoque intermedio: los menúes o funciones asistentes facilitan algunas tareas generales (abrir archivos, carga de datos, exportar gráficos y resultados, etc.) pero dejan la escritura del código y ejecución del análisis estadístico en manos del usuario. Entre estas alternativas se destaca  [**RStudio**](https://posit.co/products/open-source/rstudio/) desarrollado por la empresa [posit](https://posit.co/) el cual también es de código abierto (licencia GNU/GPL), multiplataforma y ofrece una versión gratuita.

```{r, echo = F, fig.cap = 'Interfase de **RStudio**', out.width = '75%', out.extra=''} 
include_graphics('assets/Rstudio.png', auto_pdf = T) # renovar
```

## ¿Cómo instalar **R** y **RStudio**?

**R** y **RStudio** se instalan por separado. Ambos softwares son multiplataforma y pueden ser ejecutados en sistemas operativos Windows, Mac OS X  y Linux. 

**R** puede funcionar sin **RStudio**, en cambio **RStudio** necesita que al menos una versión de **R** esté instalada en el sistema.

<br>

La página de descarga de **posit** [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/) ofrece un excelente punto de partida para instalar ambos programas.

```{r, echo = F, fig.cap = 'Página de descaga de **R**', out.width = '75%', out.extra=''} 
#webshot::webshot('https://cloud.r-project.org/', file = 'assets/CRAN_choose_OS.png')
include_graphics('assets/posit.png', auto_pdf = T)
```


A continuación se describe el procedimiento para instalar **R** y **RStudio** bajo Windows.

### Instalación de **R**

1) Click en el botón `DOWNLOAD AND INSTALL R`:

```{r, echo = F, fig.cap = 'Página de descaga de **R**', out.width = '75%', out.extra=''} 
#webshot::webshot('https://cloud.r-project.org/', file = 'assets/CRAN_choose_OS.png')
include_graphics('assets/r-botton.png', auto_pdf = T)
```

```{r, echo = F, fig.cap = 'Página de descaga de **R**', out.width = '75%', out.extra=''} 
#webshot::webshot('https://cloud.r-project.org/', file = 'assets/CRAN_choose_OS.png')
include_graphics('assets/CRAN_choose_OS.png', auto_pdf = T)
```

```{r, echo = F, fig.cap = 'Dirigirse a Install R for firt time', out.width = '75%', out.extra=''} 
#webshot::webshot('https://cloud.r-project.org/', file = 'assets/CRAN_choose_OS.png')
include_graphics('assets/install first time.png', auto_pdf = T)
```
```{r, echo = F, fig.cap = 'Dirigire a "Download R-X.X.X for Windows"', out.width = '75%', out.extra=''} 
#webshot::webshot('https://cloud.r-project.org/', file = 'assets/CRAN_choose_OS.png')
include_graphics('assets/download R.png', auto_pdf = T)
```

Descargar el archivo instalador correspondiente a la última versión estable de **R** desde el CRAN[^1] (del inglés, _Comprenhensive R Archive Network_) visitando el siguiente [link](https://cloud.r-project.org/bin/windows/base/release.htm). 

[^1]: CRAN es un conjunto de servidores espejo distribuidos alrededor del mundo que tienen copias de **R** y sus paquetes. No es necesario escojer el espejo más cercano ya que el espejo nube (https://cloud.r-project.org) automáticamente determina de que servidor conviene realizar la descarga.

2) Ejecutar el archivo descargado [^2] y seguir el asistente de instalación con todas las opciones por defecto. 

[^2]: Al momento de escribir estas instrucciones la última versión estable de **R** era la 4.3.1 _Beagle Scouts_, por lo tanto el link apuntará al archivo `R-4.3.1-win.exe`. 

3) Si la instalación ha sido exitosa en el menú _Inicio_ podrá encontrarse la carpeta _R_ que contendrá dos accesos directos a la interfase de usuario mínima que viene con la versión de **R** para Windows.

```{r, echo = F, fig.cap = 'R GUI para Windows', out.width = '75%', out.extra=''} 
include_graphics('assets/rgui.png', auto_pdf = T)
```

### Instalación de **RStudio**

1) Click en el botón `DOWNLOAD RSTUDIO DESKTOP FOR ......`:

```{r, echo = F, fig.cap = 'Página de descaga de **R**', out.width = '75%', out.extra=''} 
#webshot::webshot('https://cloud.r-project.org/', file = 'assets/CRAN_choose_OS.png')
include_graphics('assets/rstudio-botton.png', auto_pdf = T)
```

Descargar el archivo de instalación correspondiente a nuestra plataforma o sistema operativo. Al momento de escribir estas instrucciones la última versión estable de **RStudio** era `RStudio-2023.09.0-463.exe` que se encuentra en este [link](https://download1.rstudio.org/electron/windows/RStudio-2023.09.0-463.exe)

   En el caso que haya una nueva versión, ir al sitio web de descarga de **RStudio** [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)

```{r, echo = F, out.width = "75%", fig.cap = 'Página de descarga de **RStudio**',  out.extra=''}
# webshot::webshot(
#    url = 'https://www.rstudio.com/products/rstudio/download/',
#    file = "./assets/rstudio_download_OS.png",
#    selector = "div.section.pt-4"
# )
knitr::include_graphics("assets/rstudio_download_OS.png", auto_pdf = T)
```

2) Ejecutar el archivo `.exe` y seguir el asistente de instalación con todas las opciones por defecto.

3) Si la instalación ha sido exitosa en el menú _Inicio_ dentro de la carpeta _RStudio_  se encontrará el acceso directo a **RStudio** el cual, mediante el menu contextual (botón derecho del ratón) puede enviarse al Escritorio como acceso directo o bien anclar al menu de Inicio o barra de acceso rápido.


```{r, echo = F, fig.cap = 'Icono de **RStudio**', out.width = '25%', out.extra=''} 
#webshot::webshot('https://cloud.r-project.org/', file = 'assets/CRAN_choose_OS.png')
include_graphics('assets/rstudio_icon.png', auto_pdf = T)
```

Ahora sí, ya tenemos listo **R** y **RStudio** para empezar a trabajar!!

::: {.callout-note icon=false}

### ACTIVIDAD

1. Instalar **R** y **RStudio**

:::

## Primera sesión

El entorno de trabajo de **RStudio** se divide en cuatro paneles. La disposición y contenido de los paneles se puede personalizar yendo a `View > Panes > Panes Layout...`.
A continuación la descripción de los paneles principales: 

```{r, echo = F, out.width = "90%", fig.cap = 'Interfase principal de **RStudio**',  out.extra=''}
include_graphics("assets/RStudio_paneles.png", auto_pdf = T)
```

1. **Editor**. Es donde se editan los _scripts_ que son archivos de texto plano con los comandos para ejecutar en **R**. Este panel no aparece a menos que se cree un nuevo script o se abra uno previamente guardado. 
     
2. **Console** (consola). Es donde vive **R** propiamente dicho. Allí se ejecutan los comandos y se obtienen las salidas de **R**. 

3. **Environmnet/History/Connections**. En la primera pestaña se visualizan los objetos (variables, funciones o datos cargados) que están disponibles en el entorno de **R**, i.e. en la memoria. En la segunda se puede ver el historial de comandos ingresados o enviados a la consola. La tercera pestaña visualiza las conexiones establecidas con diferentes base de datos.

4. **Files/Plots/Packages/Help/Viewer**. Allí se puede manejar los archivos del directorio de trabajo, visualizar los gráficos generados en **R** con posibilidad de exportarlos en varios formatos, administrar los paquetes o complementos, buscar o explorar el manual de ayuda y previsualizar archivos HTML.


### La consola

La línea de comandos o **consola** es el modo interactivo mediante el cual podemos ejecutar comandos directamente en el intérprete de **R**. El símbolo o _prompt_ `>` indica que **R** está disponible esperando una orden. Si la orden no está completa el símbolo se transforma en `+`. Por ejemplo: si tipeamos `2 + 2` y luego `ENTER`:

```{r}
2 + 2
```

Obetenemos inmediatemente el resultado. Otro ejemplo: el promedio de los números `1`, `3` y `4`

```{r}
(1 + 3 + 4) / 3
```

::: {.callout-note icon=false}

#### ACTIVIDAD

1. Escribir una operacion matemática, por ejemplo: `3*4`

2. Escribir algo en la consola. ¿Que sucede?

3. Escribir lo anterior entre comillas `" "`.

:::


### El script

El **editor de scripts** (panel #1) es un editor de texto plano que está conectado con la consola (panel #2). Tiene algunas funcionalidades que facilitan la edición del código:

- Resaltado sintaxis: mediante colores resalta las funciones, variables, comandos o palabras claves del lenguaje **R**
- Sangrado automático: agrega espacios en blanco para mantener la sangría de los bloques de código.
- Plegado de código: permite colapsar bloques de código
- Completado automático y ayuda en linea: muestra sugerencias para completar el comando o argumentos usando la tecla `TAB`.

Para crear un nuevo script se puede usar uno de los siguientes métodos:

- Ir a al menu `File > New File > R Script`
- Usar el atajo de teclado `CTRL + SHIFT + N`
- Clickear en el primer ícono de la barra de menu

```{r, echo = F, out.width = "75%", fig.cap = 'Barra de herramientas de **RStudio**',  out.extra=''}
include_graphics("assets/menu_bar.png", auto_pdf = T)
```

Una vez abierto el script en blanco, se pueden empezar a escribir los comandos de **R**. Por ejemplo podemos escribir lo siguiente:

```{r, eval = F}
"Hola Mundo!" # Clásico mensaje "Hola mundo!"

# Calcular el promedio de estos números
(1 + 3 + 4) / 3
```

Estos comandos no se van a ejecutar automáticamente ya que sólo los hemos escrito en el _script_. Para ejecutar los comandos en la consola hay que posicionar el cursor en la línea deseada o bien seleccionar si queremos ejecutar varias a la vez y luego enviarlo a la consola con una de las siguientes opciones:

- Ir al menu `Code > Run Selected Line(s)`
- Usar el atajo de teclado `CTRL + ENTER` o `CTRL + R`
- Usar el ícono `Run` de la barra de herramientas de la pestaña del script

```{r, echo = F, out.width = "75%", fig.cap = 'Barra de herramientas del panel Editor',  out.extra=''}
include_graphics("assets/menu_run.png", auto_pdf = T)
```

El simbolo `#` indica que lo que sigue es un **comentario** y por lo tanto **R** lo ignora cuando es enviado a la consola. Los comentarios pueden ir solos en una línea separada o bien dentro de una línea que tenga algún comando. Si bien no son necesarios para correr el código, los comentarios son muy útiles para estructurar el script y hacer anotaciones para que otros, o nosotros en un futuro, entiendan lo que hace esa parte del script.

Para guardar el script:

1. Ir al menu `File > Save` o usar el atajo de teclado `CTRL + S` o bien el ícono con el diskette de la barra de herramientas global o de la pestaña del script activo.

2. Elegir la carpeta destino y el nombre de archivo. Automáticamente se agregará la extensión `.R` que corresponde a los scripts.


::: {.callout-note icon=false}

#### ACTIVIDAD

1. Abrir un script nuevo 

2. Escribir un comentario

3. Escribir un texto o un comando numérico

4. Guardar el script con el nombre `mi_primer_script.R`.

:::

### Directorio de trabajo y proyectos

**R** trabaja con un directorio de trabajo o _working directory_ que es la dirección o _path_ que figura en el titulo del panel **Console**. Esto se puede averiguar con `getwd()`

```{r, eval = F}
getwd()
```

Por defecto es el directorio base del usuario que depende de cada plataforma. En linux es el `/home/usuario` en cambio en Windows es `C:/Users/usuario/Documents`. 

A menos que se especifique lo contrario, se asume que los archivos de entrada o salida se ubican en esa. Esto se puede modificar en cualquier momento con la función `setwd()`. 

```{r, eval = F}
setwd("ruta/a/otra/carpeta")
```

**RStudio** extiende esta característica a través de los proyectos o _projects_. Cada proyecto es una carpeta o _folder_ que contienen un archivo `.RProj` con algunas configuraciones específicas. 

Al abrir un proyecto, automáticamente se cambia el directorio de trabajo a esta carpeta. Esto permite organizar los archivos de datos, las salidas, los scripts, etc., dentro de un directorio de trabajo (_working directory_) y volver a ellos de manera más rápida, eficiente, y portable.

Para crear un proyecto en **RStudio**: 

1. Ir a `File > New project... ` o bien el ícono `Create project` de la barra de herramientas. 

```{r, echo = F, out.width = "75%", out.extra=''}
include_graphics("assets/new_project.png", auto_pdf = T)
```

2. Seleccionar `New Directory` y en `Project type` seleccionar `New project`.

```{r, echo = F, out.width = "75%", out.extra='', fig.show = "hold"}
include_graphics(c("assets/new_project1.png", "assets/new_project2.png"), auto_pdf = T)
```

3. Una vez en el cuadro de diálogo `Create new project` ingresar el nombre del proyecto (e.g. `mi_proyecto`) en `Directory name` que será a su vez el nombre de la carpeta que **RStudio** va a crear por nosotros. 

   Luego en `Create project as a subdirectory of` indicar _donde_ queremos que **RStudio** cree la carpeta.  

```{r, echo = F, out.width = "75%", out.extra=''}
include_graphics("assets/new_project3.png", auto_pdf = T)
```

4. Si todo sale bien, se crea la carpeta con el nombre que indicamos y dentro de ésta un archivo con extensión `.Rproj`. Este archivo solamente se usa para abrir el directorio. No se debe sobreescribir con el script.

::: {.callout-note icon=false}

#### ACTIVIDAD

1. Crear un proyecto nuevo con el nombre "Intro_R" en el escritorio o lugar de preferencia. 

2. Cerrar **Rstudio**.

3. Abrir **Rstudio** desde el proyecto.

4. Copiar el script creado en la actividad anterior dentro del nuevo proyecto.

5. Abrir el script.

:::

### Ayuda!!!

Por último, y no menos importante, **R** y **RStudio** cuentan con un completo sistema de ayuda. 

Desde la consola se puede acceder usando la función `?` seguida del nombre de la función o bien `help("nombre")`

```{r}
# Pedir ayuda de la función mean
?mean
help(mean)
```

Una de las ventajas de **RStudio** es que dispone de un panel (Panel #4) dedicado a visualizar las páginas de ayuda. Allí se puede navegar por las páginas utilizando los links, realizar búsquedas, etc. Leer la documentación nunca viene mal y generalmente ahorra dolores de cabeza.

