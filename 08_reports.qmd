---
title: "Reportes dinámicos"
---

```{r, echo = F, include = F}
pacman::p_load(knitr)
opts_chunk$set(echo = T, message = F, warning = F)
```

## Programación literaria

Es un paradigma de programación introducido por _Donald Kunth_ en 1984 mediante el cual la explicación del código de programación se da en lenguaje natural (i.e. español) intercalado con fragmentos de código que puede ejecutarse. 

Así, a diferencia de código fuente donde todo lo que no sea código debe ir con etiquetas de _comentario_  para que no sea ejecutado, en **R** usando el símbolo `#`, en _programación literaria_ el texto se escribe sin etiquetas y las celdas o bloques de código o _chunks_ se delimitan con caracteres especiales.

Este paradigma es muy utilizado actualmente, especialmente en investigación reproducible y ciencia de datos poder documentar los procedimientos analíticos y generar informes dinámicos.

Existen varios softwares que permiten implementar este paradigma: `swave` para LaTeX, `R Markdown` para **R**, y recientemente `Quarto` para varios lenguajes, entre ellos **R**. 

## Quarto

`Quarto` es una versión avanzada de generación de `R Markdown` desarrollada por Posit, que admite múltiples lenguajes y ofrece numerosas características y capacidades nuevas. Al igual que `R Markdown`, `Quarto` utiliza `knitr` para ejecutar código R y, por lo tanto, puede renderizar la mayoría de los archivos Rmd existentes sin necesidad de modificaciones.

`Quarto` permite crear documentos interactivos y dinámicos que combinan texto formateado con bloques de código ejecutable en varios lenguajes, incluido R. Esto proporciona a los usuarios una forma poderosa y flexible de generar informes, presentaciones y documentos que incluyen análisis de datos en tiempo real y visualizaciones interactivas.

Además, `Quarto` ofrece una gama de nuevas características y funcionalidades que permiten a los usuarios crear documentos más complejos y personalizables. Puedes aprovechar estas nuevas capacidades para crear informes y documentos altamente personalizados que se adapten a tus necesidades específicas.


### Instalación

Abrir RStudio y ejecutar el siguiente comando para instalar el paquete `rmarkdown` y `quarto`:

```{r, warning=FALSE, eval=FALSE}
install.packages("quarto")
```

### Estructura del documento

Para crear un nuevo documento, simplemente se accede desde el menú **File**, **New file**, **Quarto document**. En la ventana que aparece, se pude modificar el título del documento y seleccionar el tipo de documento que vamos a generar luego, por ejemplo *html*.

```{r, echo = F, fig.cap = 'Nuevo documento de Quarto', out.width = '75%' , out.extra=''}
include_graphics('assets/new_quarto_doc.png', auto_pdf = T)
```

Esto abre un documento de muestra o plantilla con extensión `.qmd`. Este documento tiene la estructurua mínima para generar un reporte.

#### Encabezado YAML

Las primeras líneas del documento corresponden al encabezado que está en formato YAML (otro lenguaje de etiquetas). Allí se especifican los metadatos necesarios para controlar la creación y ejecución del documento. Como minimo se debe especificar el título del documento:

````{markdown}
---
title: "Mi primer documento quarto"
---
````

Hay varios campos y opciones dentro del YAML. Por ejemplo: si se quiere agregar información del autor del documento y el formato del documento:

````{markdown}
---
title: "Mi primer documento quarto"
author: "Autor 1"
format: html
---
````

- title: Especifica el título del documento.
- author: El nombre del autor del documento.
-format: formato del documento.


Otras opciones que tambén se pueden configurar:

````{markdown}
---
title: "Título del Documento"
author: "Autor 1"
date: "2024-11-05"
format: html
output-options:
  toc: true  # Muestra la tabla de contenidos
  toc-depth: 2 # Profundidad de la tabla de contenidos
---
````

- date: Fecha de creación o publicación.
- output-options: Configura opciones específicas para el formato de salida, como mostrar la tabla de contenidos (toc) y su profundidad (toc-depth).


#### Bloques de Código

Los bloques de código que utilizan llaves alrededor del nombre del lenguaje (por ejemplo para **R** sería 

```{{r}}
# Codigo de R
```


Lo que está dentro del bloque de código debe ser comandos de R válidos ya que se ejecutarán al momento de crear el informe.

Cada bloque de código tiene opciones que permiten controlar el comportamiento particular del código que contienen.

#### Texto

Lo que no es encabezado (YAML) o bloques de código (chunks) es texto plano. El texto se puede organizar por secciones creando títulos con el simbolo `#`. A mayor cantidad `#` menor jerarquia de la sección  

```
# Titulo 1
```

```
## Titulo 2
```

```
### Titulo 3
```

```
#### Titulo 4
```

### Modos de visualización

Los documentos se pueden editar en modo fuente (`Source`) o gráfico (`Visual`). Para cambiar al modo `visual` para un documento determinado, use el botón `Source` o `Visual` en la parte superior izquierda de la barra de herramientas del documento (o alternativamente el método abreviado de teclado ⌃⇧ F4):

```{r, echo = F, fig.cap = 'Modos de visualización', out.width = '75%' , out.extra=''}
include_graphics('assets/switching.png', auto_pdf = T)
```

Puede cambiar entre el modo `Source` o `Visual` en cualquier momento.

### Atajos de teclado

Hay atajos de teclado para todas las tareas básicas de edición. El modo visual admite atajos de teclado. Ejemplos de atajos:

| **Comando**  | **Atajo teclado** | Atajo Markdown |
|--------------|-------------------|----------------|
| Negrita      | Ctrl + B          | \*\*bold\*\*   |
| Italica      | Ctrl + I          | \*italic\*     |
| Código       | Ctrl + D          | \~\~strike\~\~ |
| Tachado      |                   | \~sub\~        |
| Superíndice  |                   | \^super\^      |
| Encabezado 1 | Ctrl + Alt + 1    | \#             |
| Encabezado 2 | Ctrl + Alt + 2    | \##            |
| Encabezado 3 | Ctrl + Alt + 3    | \###           |
| Link         | Ctrl + K          | \<href\>       |

: Atajos de teclado



<!-- # Opciones de fragmentos de código -->

<!-- La salida del fragmento se puede personalizar con opciones de knitr, argumentos establecidos en el {} del encabezado de un fragmento. Arriba, utilizamos cinco argumentos: -->

<!-- ```{r, echo = F, fig.cap = 'Opciones de fragmentos de código', out.width = '75%' , out.extra=''} -->
<!-- include_graphics('assets/echo.png', auto_pdf = T) -->
<!-- ``` -->

<!-- -   `include = FALSE` evita que el código y los resultados aparezcan en el archivo terminado. R Markdown todavía ejecuta el código en el fragmento y los resultados pueden ser utilizados por otros fragmentos. -->
<!-- -   `echo = FALSE` evita que el código, pero no los resultados, aparezcan en el archivo terminado. Esta es una forma útil de incrustar figuras. -->
<!-- -    -->
<!-- -   `message = FALSE` evita que los mensajes generados por código aparezcan en el archivo terminado. -->
<!-- -   `warning = FALSE` evita que las advertencias generadas por el código aparezcan en el archivo terminado. -->
<!-- -   `fig.cap = "..."` agrega un título a los resultados gráficos. -->

<!-- Los anteriores se pueden incluir indicando `TRUE` en el que corresponda. -->

<!-- # Opciones globales -->

<!-- Para configurar opciones globales que se apliquen a cada fragmento de su archivo, llame a `knitr::opts_chunk$set` en un fragmento de código. `Knitr` tratará cada opción que pase a `knitr::opts_chunk$set` como un valor predeterminado global que se puede sobrescribir en encabezados de fragmentos individuales. -->

<!-- ```{r, echo = F, fig.cap = 'Opciones globales', out.width = '75%' , out.extra=''} -->
<!-- include_graphics('assets/opts_chunk.png', auto_pdf = T) -->
<!-- ``` -->


### Generar reporte (`render`)

Para transformar el archivo `.qmd` en el formato de salida `pdf`, `docx`, `html`, etc., se usa la función `render` o bien el botón `Render` en RStudio que se encuentra en la barra de herramientas justo encima del documento (una flecha azul segmentada)

```{r, echo = F, fig.cap = 'Renderizar documento', out.width = '75%' , out.extra=''}
include_graphics('assets/render.png', auto_pdf = T)
```

El botón renderizará el documento al primer formato de salida listado en el encabezado. Si no se especifica ningún formato, se representará en HTML.

### Personalización avanzada

Podrías incluir opciones avanzadas en el YAML, como configuración para varios formatos de salida, o propiedades específicas para tipos de documentos. Aquí tienes ejemplos de configuración para exportar en múltiples formatos o configurar temas en HTML:

````{markdown}
---
title: "Mi documento avanzado"
author: "Patricia Acetta"
date: "2024-11-05"
format:
  html:
    theme: cosmo  # Tema de HTML
    toc: true     # Mostrar tabla de contenido
    toc-location: left
---
````


Configuración de Opciones de Fragmento de Código
Profundiza en las opciones de fragmento de código (chunks) de knitr, como fig.align, fig.width, fig.height, results, y cache. Por ejemplo, puedes configurar el tamaño de las figuras o habilitar el almacenamiento en caché para acelerar la renderización:


````{r, eval = F, fig.width = 3.5}
plot(mtcars$mpg, mtcars$hp)
````


Esto ajusta el tamaño y la alineación de la gráfica y permite almacenarla en caché para evitar re-ejecutar el código en futuras renderizaciones.



*Uso de Plantillas Personalizadas*

En Quarto, puedes crear tus propias plantillas para mantener un formato estandarizado para tus documentos. Esto es especialmente útil si trabajas en un equipo o deseas mantener una identidad visual consistente en tus informes.

````{markdown}
---
title: "Mi documento avanzado"
author: "Autor 1"
format:
  html:
    theme: cosmo  # Tema de HTML
    toc: true     # Mostrar tabla de contenido
    toc-location: left
  pdf:
    keep-tex: true  # Guarda el archivo intermedio .tex
  docx:
    reference-doc: "mi_plantilla.docx"  # Plantilla personalizada de Word
---
````
